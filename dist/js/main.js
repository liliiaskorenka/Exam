$(".sectionIgredients").parallax({imageSrc:"Images/BgSection3.jpg"}),jQuery(function(e){e("body").scrollToTop({skin:"square"})}),$.datetimepicker.setLocale("en"),jQuery("#datetimepicker").datetimepicker(),$(".bxslider").bxSlider({mode:"fade",captions:!0,auto:!0,pause:4e3}),$.validate({modules:"date, security",onSuccess:function(e){$.post("/reservations",e.serialize());var a="Thank you "+$("#exampleInputName",e).val()+"!";return toastr.success(a,"Liliia Skorenka Restaurant",{timeOut:3e3}),!1}}),$(function(){var e=[34.081199,-118.385253],a={lat:34.081199,lng:-118.385253};$("#map").googleMap({zoom:16,coords:e});var o=$("#map").data("googleMap");new google.maps.Marker({position:a,map:o})}),$(document).on("scroll",function(){$(document).scrollTop()>100?$("header").removeClass("largeHeader").addClass("smallHeader"):$("header").removeClass("smallHeader").addClass("largeHeader")}),$("#tableSectionMenu").DataTable({ajax:{url:"/json/descriptionMenu.json",dataSrc:""},columns:[{data:"Dish"},{data:"Ingredients"},{data:"Portion"},{data:"Calories"},{data:"Price"}]});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiJCIsInBhcmFsbGF4IiwiaW1hZ2VTcmMiLCJqUXVlcnkiLCJzY3JvbGxUb1RvcCIsInNraW4iLCJkYXRldGltZXBpY2tlciIsInNldExvY2FsZSIsImJ4U2xpZGVyIiwibW9kZSIsImNhcHRpb25zIiwiYXV0byIsInBhdXNlIiwidmFsaWRhdGUiLCJtb2R1bGVzIiwib25TdWNjZXNzIiwiJGZvcm0iLCJwb3N0Iiwic2VyaWFsaXplIiwibXNnIiwidmFsIiwidG9hc3RyIiwic3VjY2VzcyIsInRpbWVPdXQiLCJyZXN0YXVyYW50X2Nvb3Jkc19hcnIiLCJyZXN0YXVyYW50X2Nvb3Jkc19vYmoiLCJsYXQiLCJsbmciLCJnb29nbGVNYXAiLCJ6b29tIiwiY29vcmRzIiwibWFwIiwiZGF0YSIsImdvb2dsZSIsIm1hcHMiLCJNYXJrZXIiLCJwb3NpdGlvbiIsImRvY3VtZW50Iiwib24iLCJzY3JvbGxUb3AiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiRGF0YVRhYmxlIiwiYWpheCIsInVybCIsImRhdGFTcmMiLCJjb2x1bW5zIl0sIm1hcHBpbmdzIjoiQUFBQUEsRUFBRSxzQkFBc0JDLFVBQVVDLFNBQVUsMEJBRTVDQyxPQUFPLFNBQVNILEdBQ1pBLEVBQUUsUUFBUUksYUFDTkMsS0FBTSxhQUdkTCxFQUFFTSxlQUFlQyxVQUFVLE1BQzNCSixPQUFPLG1CQUFtQkcsaUJBSzFCTixFQUFFLGFBQWFRLFVBQ1hDLEtBQU0sT0FDTkMsVUFBVSxFQUNWQyxNQUFNLEVBQ05DLE1BQU8sTUFHWFosRUFBRWEsVUFDRUMsUUFBVSxpQkFDVkMsVUFBWSxTQUFTQyxHQUNqQmhCLEVBQUVpQixLQUFNLGdCQUFpQkQsRUFBTUUsWUFDL0IsSUFBSUMsR0FBTSxhQUFlbkIsRUFBRSxvQkFBcUJnQixHQUFPSSxNQUFRLEdBRS9ELE9BREFDLFFBQU9DLFFBQVFILEVBQUssOEJBQStCSSxRQUFTLE9BQ3JELEtBYWZ2QixFQUFFLFdBQ0UsR0FBSXdCLElBQXlCLFdBQVcsWUFDcENDLEdBQXlCQyxJQUFLLFVBQVdDLEtBQUssV0FDbEQzQixHQUFFLFFBQVE0QixXQUFXQyxLQUFNLEdBQUlDLE9BQVFOLEdBQ3ZDLElBQUlPLEdBQU0vQixFQUFFLFFBQVFnQyxLQUFLLFlBQ1osSUFBSUMsUUFBT0MsS0FBS0MsUUFDekJDLFNBQVVYLEVBQ1ZNLElBQUtBLE1BS2IvQixFQUFFcUMsVUFBVUMsR0FBRyxTQUFTLFdBQ2pCdEMsRUFBRXFDLFVBQVVFLFlBQVksSUFDdkJ2QyxFQUFFLFVBQVV3QyxZQUFZLGVBQWVDLFNBQVMsZUFFaER6QyxFQUFFLFVBQVV3QyxZQUFZLGVBQWVDLFNBQVMsaUJBcUJ4RHpDLEVBQUUscUJBQXFCMEMsV0FDbkJDLE1BQ0lDLElBQUssNkJBQ1RDLFFBQVMsSUFFVEMsVUFDTWQsS0FBTSxTQUNOQSxLQUFNLGdCQUNOQSxLQUFNLFlBQ05BLEtBQU0sYUFDTkEsS0FBTSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChcIi5zZWN0aW9uSWdyZWRpZW50c1wiKS5wYXJhbGxheCh7aW1hZ2VTcmM6IFwiSW1hZ2VzL0JnU2VjdGlvbjMuanBnXCJ9KTtcclxuXHJcbmpRdWVyeShmdW5jdGlvbigkKSB7XHJcbiAgICAkKFwiYm9keVwiKS5zY3JvbGxUb1RvcCh7XHJcbiAgICAgICAgc2tpbjogXCJzcXVhcmVcIlxyXG4gICAgfSk7XHJcbn0pO1xyXG4kLmRhdGV0aW1lcGlja2VyLnNldExvY2FsZShcImVuXCIpO1xyXG5qUXVlcnkoXCIjZGF0ZXRpbWVwaWNrZXJcIikuZGF0ZXRpbWVwaWNrZXIoKTtcclxuXHJcbi8qJC52YWxpZGF0ZSh7XHJcbiAgICBtb2R1bGVzIDogXCJkYXRlLCBzZWN1cml0eVwiXHJcbn0pOyovXHJcbiQoXCIuYnhzbGlkZXJcIikuYnhTbGlkZXIoe1xyXG4gICAgbW9kZTogXCJmYWRlXCIsXHJcbiAgICBjYXB0aW9uczogdHJ1ZSxcclxuICAgIGF1dG86IHRydWUsXHJcbiAgICBwYXVzZTogNDAwMFxyXG59KTtcclxuXHJcbiQudmFsaWRhdGUoe1xyXG4gICAgbW9kdWxlcyA6IFwiZGF0ZSwgc2VjdXJpdHlcIixcclxuICAgIG9uU3VjY2VzcyA6IGZ1bmN0aW9uKCRmb3JtKSB7XHJcbiAgICAgICAgJC5wb3N0KCBcIi9yZXNlcnZhdGlvbnNcIiwgJGZvcm0uc2VyaWFsaXplKCkgKTtcclxuICAgICAgICB2YXIgbXNnID0gXCJUaGFuayB5b3UgXCIgKyAkKFwiI2V4YW1wbGVJbnB1dE5hbWVcIiwgJGZvcm0pLnZhbCgpICsgXCIhXCI7XHJcbiAgICAgICAgdG9hc3RyLnN1Y2Nlc3MobXNnLCBcIkxpbGlpYSBTa29yZW5rYSBSZXN0YXVyYW50XCIsIHt0aW1lT3V0OiAzMDAwfSk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8qb25TdWNjZXNzIDogZnVuY3Rpb24oJGZvcm0pIHtcclxuICAgICQucG9zdCggXCIvcmVzZXJ2YXRpb25zXCIsICRmb3JtLnNlcmlhbGl6ZSgpICkuZG9uZShmdW5jdGlvbiggZGF0YSApIHtcclxuICAgICAgICB2YXIgbXNnID0gJ1RoYW5rIHlvdSAnICsgJCgnI2V4YW1wbGVJbnB1dE5hbWUnLCAkZm9ybSkudmFsKCkgKyAnISc7XHJcbiAgICAgICAgdG9hc3RyLnN1Y2Nlc3MobXNnLCAnTGlsaWlhIFNrb3JlbmthIFJlc3RhdXJhbnQnLCB7dGltZU91dDogMzAwMH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn0qL1xyXG5cclxuXHJcbiQoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcmVzdGF1cmFudF9jb29yZHNfYXJyID0gWzM0LjA4MTE5OSwgLTExOC4zODUyNTNdO1xyXG4gICAgdmFyIHJlc3RhdXJhbnRfY29vcmRzX29iaiA9IHtsYXQ6IDM0LjA4MTE5OSwgbG5nOiAtMTE4LjM4NTI1M307XHJcbiAgICAkKFwiI21hcFwiKS5nb29nbGVNYXAoe3pvb206IDE2LCBjb29yZHM6IHJlc3RhdXJhbnRfY29vcmRzX2Fycn0pO1xyXG4gICAgdmFyIG1hcCA9ICQoXCIjbWFwXCIpLmRhdGEoXCJnb29nbGVNYXBcIik7XHJcbiAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XHJcbiAgICAgICAgcG9zaXRpb246IHJlc3RhdXJhbnRfY29vcmRzX29iaixcclxuICAgICAgICBtYXA6IG1hcFxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbiQoZG9jdW1lbnQpLm9uKFwic2Nyb2xsXCIsZnVuY3Rpb24oKXtcclxuICAgIGlmKCQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpPjEwMCl7XHJcbiAgICAgICAgJChcImhlYWRlclwiKS5yZW1vdmVDbGFzcyhcImxhcmdlSGVhZGVyXCIpLmFkZENsYXNzKFwic21hbGxIZWFkZXJcIik7XHJcbiAgICB9IGVsc2V7XHJcbiAgICAgICAgJChcImhlYWRlclwiKS5yZW1vdmVDbGFzcyhcInNtYWxsSGVhZGVyXCIpLmFkZENsYXNzKFwibGFyZ2VIZWFkZXJcIik7XHJcbiAgICB9XHJcbn0pO1xyXG4vKlxyXG4kKFwiI3BhZ2luYXRpb24tZGVtb1wiKS50d2JzUGFnaW5hdGlvbih7XHJcbiAgICB0b3RhbFBhZ2VzOiAzNSxcclxuICAgIHZpc2libGVQYWdlczogNSxcclxuICAgIG9uUGFnZUNsaWNrOiBmdW5jdGlvbiAoZXZlbnQsIHBhZ2UpIHtcclxuICAgICAgICAkKFwiI3BhZ2UtY29udGVudFwiKS50ZXh0KFwiUGFnZSBcIiArIHBhZ2UpO1xyXG4gICAgfVxyXG59KTtcclxuKi9cclxuXHJcblxyXG4vKiQoXCIjaW5wdXQtMjQ4XCIpLnJhdGluZyh7XHJcbiBzdGVwOiAxLFxyXG4gc3RhckNhcHRpb25zOiB7MTogXCJWZXJ5IFBvb3JcIiwgMjogXCJQb29yXCIsIDM6IFwiT2tcIiwgNDogXCJHb29kXCIsIDU6IFwiVmVyeSBHb29kXCJ9LFxyXG4gc3RhckNhcHRpb25DbGFzc2VzOiB7MTogXCJ0ZXh0LWRhbmdlclwiLCAyOiBcInRleHQtd2FybmluZ1wiLCAzOiBcInRleHQtaW5mb1wiLCA0OiBcInRleHQtcHJpbWFyeVwiLCA1OiBcInRleHQtc3VjY2Vzc1wifVxyXG4gfSk7XHJcbiovXHJcblxyXG4kKFwiI3RhYmxlU2VjdGlvbk1lbnVcIikuRGF0YVRhYmxlKHtcclxuICAgIGFqYXg6IHtcclxuICAgICAgICB1cmw6IFwiL2pzb24vZGVzY3JpcHRpb25NZW51Lmpzb25cIixcclxuICAgIGRhdGFTcmM6IFwiXCJcclxuICAgIH0sXHJcbiAgICBjb2x1bW5zOiBbXHJcbiAgICAgICAgeyBkYXRhOiBcIkRpc2hcIiB9LFxyXG4gICAgICAgIHsgZGF0YTogXCJJbmdyZWRpZW50c1wiIH0sXHJcbiAgICAgICAgeyBkYXRhOiBcIlBvcnRpb25cIiB9LFxyXG4gICAgICAgIHsgZGF0YTogXCJDYWxvcmllc1wiIH0sXHJcbiAgICAgICAgeyBkYXRhOiBcIlByaWNlXCIgfVxyXG5dXHJcbn0pO1xyXG5cclxuLyokKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAkKGRvY3VtZW50KS5vbihcInNjcm9sbFwiLCBvblNjcm9sbCk7XHJcblxyXG4gICAgJCgnYVtocmVmXj1cIiNcIl0nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoXCJzY3JvbGxcIik7XHJcblxyXG4gICAgICAgICQoJ2EnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuaGFzaDtcclxuICAgICAgICAkdGFyZ2V0ID0gJCh0YXJnZXQpO1xyXG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICdzY3JvbGxUb3AnOiAkdGFyZ2V0Lm9mZnNldCgpLnRvcCsyXHJcbiAgICAgICAgfSwgNTAwLCAnc3dpbmcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcInNjcm9sbFwiLCBvblNjcm9sbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBvblNjcm9sbChldmVudCl7XHJcbiAgICB2YXIgc2Nyb2xsUG9zaXRpb24gPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKTtcclxuICAgICQoJ25hdiBhJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRMaW5rID0gJCh0aGlzKTtcclxuICAgICAgICB2YXIgcmVmRWxlbWVudCA9ICQoY3VycmVudExpbmsuYXR0cihcImhyZWZcIikpO1xyXG4gICAgICAgIGlmIChyZWZFbGVtZW50LnBvc2l0aW9uKCkudG9wIDw9IHNjcm9sbFBvc2l0aW9uICYmIHJlZkVsZW1lbnQucG9zaXRpb24oKS50b3AgKyByZWZFbGVtZW50LmhlaWdodCgpID4gc2Nyb2xsUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgJCgnbmF2IHVsIGxpIGEnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgY3VycmVudExpbmsuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMaW5rLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59Ki8iXX0=
